import java.util.Scanner;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Random;

public class Main {

	public static void main(String[] args) {

		// Ex01();
		// Ex02();
		// Ex03();
		// Ex04();
		 Ex05();
	}

	// **Ex01**//
	public static void Ex01() {

		int vet[] = createVector();
		printVector(vet, 6);
		vet = revertVector(vet);
		System.out.print("Vetor invertido: ");
		printVector(vet, 6);
		System.out.println();

	}

	public static void printVector(int vet[], int tam) {
		int count = 0;
		System.out.print("Vetor: ");
		while (count < 6) {
			System.out.print(" " + vet[count]);
			count++;
		}
	}

	public static int[] createVector() {
		Scanner sc = new Scanner(System.in);
		int vet[] = new int[6];
		int count = 0;
		while (count < 6) {
			System.out.println("Digite um número para preencher a posição " + count + " do vetor");
			vet[count] = sc.nextInt();
			count++;
		}
		sc.close();

		return vet;
	}

	public static int[] revertVector(int vet[]) {
		System.out.println();
		int len = vet.length;
		int lastPosition = vet.length - 1;
		int vet2[] = new int[len];
		int count = 0;

		for (int i = 0; i < 6; i++) {
			vet2[count] = vet[lastPosition];
			count++;
			lastPosition--;
		}
		return vet2;
	}

	// **Ex02**//

	public static void Ex02() {

		Scanner sc = new Scanner(System.in);

		System.out.println("Deseja informar o tamanho do vetor?");
		System.out.println("1 - sim");
		System.out.println("2 - não");

		int userInput = sc.nextInt();

		Vector v;

		if (userInput == 1) {
			System.out.println("Informe o tamanho do vetor:");
			userInput = sc.nextInt();
			v = new Vector(userInput);
		} else {
			v = new Vector();
		}

		v.printVector();
		System.out.println();
		int[] vSumed;
		vSumed = HandleVector.sumVector(v.getVet());
		Vector v2 = new Vector(vSumed);
		System.out.print("Vetor somado: ");
		v2.printVector();

		sc.close();
	}

	// *Ex03*//
	public static void Ex03() {

		Scanner sc = new Scanner(System.in);

		System.out.println("Informe uma data no formato DD/MM/AAAA para ser validada");
		String userInput = sc.nextLine();
		// System.out.println("input do usuário = " + userInput);
		try {
			System.out.print(Validator.isDateValid(userInput));
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		sc.close();
	}

	/* Ex04 */
	public static void Ex04() {

		Scanner sc = new Scanner(System.in);

		System.out.println("Informe uma data no formato DD/MM/AAAA para saber o dia da semana");
		String userInput = sc.nextLine();
		// System.out.println("input do usuário = " + userInput);
		try {
			Validator.isDateValid(userInput);
			System.out.println(Validator.getDayOfWeeK(userInput));
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		sc.close();
	}

	/* Ex05 */

	public static void Ex05() {
		String path = "C:\\Users\\luizf\\OneDrive\\Área de Trabalho\\main\\PM-TEO\\01-ExNivelamento\\ex05-nivelamento\\src\\file.txt";
		File file = new File(path);

		try {
			BufferedReader rd = new BufferedReader(new FileReader(file));
			String Stringdata;
			while ((Stringdata = rd.readLine()) != null) {
			
				String[] dataStringVector = Stringdata.split(";");

				System.out.println("Vetor Origianl: " + Stringdata);

				Vector vet = new Vector(dataStringVector);

				int[] sum = HandleVector.sumVector(vet.getVet());

				Vector sumedVet = new Vector(sum);

				System.out.print("Vetor somado: ");
				sumedVet.printVector();
				System.out.println();
				rd.close();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
public static void Ex06(S) {
		
		String path = "C:\\Users\\luizf\\OneDrive\\Área de Trabalho\\main\\PM-TEO\\01-ExNivelamento\\ex06-nivelamento\\file.txt";
		File file = new File(path);
		String Stringdata;
		int dataLengh;
		
		try {
			BufferedReader rd = new BufferedReader(new FileReader(file));
			dataLengh = Integer.parseInt(rd.readLine());
			for(int i = 0; i<dataLengh; i++) {
				Stringdata = rd.readLine();
				try {
					if (Validator.date(Stringdata) & Stringdata != null) {
						String dayOfWeek = Validator.getDayOfWeeK(Stringdata);
						System.out.println("A data " + Stringdata + " é uma data válida e corresponde ao " + dayOfWeek);
					}
				} catch (Exception e) {
					System.out.print("A data " + Stringdata + " contém um " );
					System.out.println(e.getMessage());
				}
			}
			rd.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}

class Vector {

	private int len;
	private int vet[];

	Vector() {
		setLen(6);
		int v[] = { 1, 3, 5, 7, 9, 11 };
		setVet(v);
	}

	Vector(int tam) {
		setLen(tam);
		int v[] = new int[tam];
		Random gen = new Random();

		for (int i = 0; i < len; i++) {
			v[i] = gen.nextInt(31);
		}

		setVet(v);
	}

	Vector(int[] vector) {
		setVet(vector);
		setLen(vector.length);
	}

	Vector(String[] vector) {
		setLen(vector.length);
		int tempVet[] = new int[vector.length];
		for (int i = 0; i < vector.length; i++) {
			tempVet[i] = Integer.parseInt(vector[i]);
		}

		setVet(tempVet);
	}

	public void printVector() {
		int len = getLen();
		System.out.print("Vetor: ");
		for (int i = 0; i < len; i++) {
			System.out.print(" " + vet[i]);
		}
	}

	public boolean contains(int n) {
		for (int i = 0; i < this.len; i++) {
			if (n == vet[i]) {
				return true;
			}
		}
		return false;
	}

	public int getLen() {
		return len;
	}

	public void setLen(int len) {
		this.len = len;
	}

	public int[] getVet() {
		return vet;
	}

	public void setVet(int vet[]) {
		this.vet = vet;
	}

}

class Validator {

	public static boolean isDateValid(String str) throws Exception {

		try {
			String[] date = str.split("/");
			// System.out.println("Split");
			if (date.length != 3 || date[0] == null || date[0] == "" || date[1] == null || date[1] == ""
					|| date[2] == null || date[2] == "") {
				throw new Exception("DATA INVÁLIDA! A data não está no formato indicado");
			} else {
				// System.out.println("distribuiu");
				int day = Integer.parseInt(date[0]);
				int month = Integer.parseInt(date[1]);
				int year = Integer.parseInt(date[2]);

				if (isYearValid(year) & isMonthValid(month)) {
					isDayValid(day, month, year);
					return true;
				}
			}
			return false;
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
	}

	public static boolean isYearValid(int year) throws Exception {
		try {
			if (year > 0 & year < 9999) {
				// System.out.println("Validou o ano");
				return true;
			} else {
				throw new Exception("Ano inválido");
			}

		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
	}

	public static boolean isMonthValid(int month) throws Exception {
		try {
			if (month > 0 & month < 13) {
				// System.out.println("Validou o mês");
				return true;
			} else {
				throw new Exception("Mês inválido");
			}

		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
	}

	public static boolean isDayValid(int day, int month, int year) throws Exception {

		int[] vw31 = { 1, 3, 5, 7, 8, 10, 12 };
		int[] vw30 = { 4, 6, 9, 11 };
		int[] vl30 = { 2 };
		Vector monthWith31 = new Vector(vw31);
		Vector monthWith30 = new Vector(vw30);
		Vector monthLess30 = new Vector(vl30);

		try {
			if (day > 0 & day <= 31) {
				if (monthWith31.contains(month)) {
					// System.out.println("validou se o dia pertence ao mes de 31");
					return true;
				} else if (monthWith30.contains(month) & day < 31) {
					// System.out.println("validou se o dia pertence ao mes de 30");
					return true;
				} else if (monthLess30.contains(month) & day <= 29) {
					// System.out.println("validou se o dia pertence a fevereiro");
					if (day == 29 & !isLeapYear(year)) {
						throw new Exception("Dia inválido, " + year + " não é ano bissexto");
					} else {
						return true;
					}
				} else {
					throw new Exception("Dia inválido");
				}
			} else {
				throw new Exception("Dia inválido");
			}

		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
	}

	public static boolean isLeapYear(int year) throws Exception {

		if (year % 4 == 0) {
			if (year % 100 != 0) {
				// System.out.println("é ano bissexto");
				return true;
			} else if (year % 400 == 0) {
				// System.out.println("é ano bissexto");
				return true;
			}

		}
		// System.out.println("Não é ano bissexto");
		return false;
	}

	public static String getDayOfWeeK(String str) throws Exception {
		Calendar cal = Calendar.getInstance();
		SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
		format.setLenient(false);

		int dayOfWeekInt;
		String dayOfWeekString;

		try {
			cal.setTime(format.parse(str));
			dayOfWeekInt = cal.get(Calendar.DAY_OF_WEEK);

			switch (dayOfWeekInt) {
			case 1:
				dayOfWeekString = "Domingo";
				break;
			case 2:
				dayOfWeekString = "Segunda-feira";
				break;
			case 3:
				dayOfWeekString = "Terça-feira";
				break;
			case 4:
				dayOfWeekString = "Quarta-feira";
				break;
			case 5:
				dayOfWeekString = "Quinta-feira";
				break;
			case 6:
				dayOfWeekString = "Sexta-feira";
				break;
			case 7:
				dayOfWeekString = "Sábado";
				break;
			default:
				dayOfWeekString = "Inválido";
				break;
			}

			return dayOfWeekString;
		} catch (ParseException e) {
			throw new Exception(e.getMessage());
		}
	}

	public static int getDay(String str) throws Exception {
		try {
			if (isDateValid(str)) {
				String[] dateVector = str.split("/");
				return Integer.parseInt(dateVector[0]);
			} else {
				throw new Exception("Não foi obter a data");
			}
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
	}

	public static int getMonth(String str) throws Exception {
		try {
			if (isDateValid(str)) {
				String[] dateVector = str.split("/");
				return Integer.parseInt(dateVector[1]);
			} else {
				throw new Exception("Não foi obter a data");
			}
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
	}

	public static int getYear(String str) throws Exception {
		try {
			if (isDateValid(str)) {
				String[] dateVector = str.split("/");
				return Integer.parseInt(dateVector[2]);
			} else {
				throw new Exception("Não foi obter a data");
			}
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
	}

}

class HandleVector {

	public static int[] sumVector(int[] v) {

		int[] vSumed;
		int count = 0;
		if (v.length % 2 == 0) {

			vSumed = new int[v.length / 2];
			int tam = v.length / 2;

			for (int i = 0; i < tam; i++) {
				vSumed[i] = v[count] + v[count + 1];
				count += 2;
			}
		} else {

			vSumed = new int[(v.length / 2) + 1];
			int tam = (v.length / 2) + 1;

			for (int i = 0; i < tam; i++) {
				if (i == tam - 1) {
					vSumed[i] = v[count] + v[count];
					count += 2;
				} else {
					vSumed[i] = v[count] + v[count + 1];
					count += 2;
				}
			}
		}

		return vSumed;

	}
}
